pipeline {
    agent any
    
    environment {
        // Node.js version
        NODE_VERSION = '18'
        
        // Application configuration
        NODE_ENV = 'test'
        CI = 'true'
        
        // Database configuration for testing
        DATABASE_URL = 'postgresql://postgres:password@localhost:5432/diagramai_test'
        POSTGRES_USER = 'postgres'
        POSTGRES_PASSWORD = 'password'
        POSTGRES_DB = 'diagramai_test'
        
        // Test configuration
        NEXTAUTH_SECRET = 'test-secret-key-for-ci'
        NEXTAUTH_URL = 'http://localhost:3000'
        
        // Disable telemetry
        NEXT_TELEMETRY_DISABLED = '1'
        
        // Test result paths
        UNIT_TEST_RESULTS = 'coverage/lcov.info'
        E2E_TEST_RESULTS = 'test-results/results.xml'
        PLAYWRIGHT_REPORT = 'playwright-report'
        
        // Build artifacts
        BUILD_DIR = '.next'
        DIST_DIR = 'dist'
    }
    
    options {
        // Build timeout
        timeout(time: 45, unit: 'MINUTES')
        
        // Keep builds
        buildDiscarder(logRotator(
            numToKeepStr: '10',
            daysToKeepStr: '30'
        ))
        
        // Disable concurrent builds
        disableConcurrentBuilds()
        
        // Timestamps in console output
        timestamps()
    }
    
    stages {
        stage('üîß Environment Setup') {
            steps {
                script {
                    echo "üöÄ Starting DiagramAI CI/CD Pipeline"
                    echo "üìã Build Information:"
                    echo "   - Build Number: ${env.BUILD_NUMBER}"
                    echo "   - Branch: ${env.BRANCH_NAME ?: 'main'}"
                    echo "   - Node Version: ${NODE_VERSION}"
                    echo "   - Workspace: ${env.WORKSPACE}"
                }
                
                // Clean workspace
                cleanWs()
                
                // Checkout code
                checkout scm
                
                // Setup Node.js environment
                script {
                    // Try to find available Node.js installation
                    try {
                        def nodeHome = tool name: "NodeJS-${NODE_VERSION}", type: 'nodejs'
                        env.PATH = "${nodeHome}/bin:${env.PATH}"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è NodeJS-${NODE_VERSION} tool not found, trying alternatives..."
                        try {
                            def nodeHome = tool name: "NodeJS", type: 'nodejs'
                            env.PATH = "${nodeHome}/bin:${env.PATH}"
                        } catch (Exception e2) {
                            echo "‚ö†Ô∏è Using system Node.js installation"
                            // Verify system Node.js is available
                            sh 'which node || (echo "‚ùå Node.js not found in system PATH" && exit 1)'
                        }
                    }
                }
                
                // Verify Node.js installation
                sh '''
                    echo "üîç Verifying Node.js installation..."
                    node --version
                    npm --version
                    echo "‚úÖ Node.js environment ready"
                '''
            }
        }
        
        stage('üê≥ Infrastructure Setup') {
            parallel {
                stage('Database Setup') {
                    steps {
                        script {
                            echo "üóÑÔ∏è Setting up test database..."
                            
                            // Start PostgreSQL using Docker
                            sh '''
                                # Stop any existing containers
                                docker stop diagramai-test-db || true
                                docker rm diagramai-test-db || true
                                
                                # Start PostgreSQL container
                                docker run -d \
                                    --name diagramai-test-db \
                                    -e POSTGRES_USER=${POSTGRES_USER} \
                                    -e POSTGRES_PASSWORD=${POSTGRES_PASSWORD} \
                                    -e POSTGRES_DB=${POSTGRES_DB} \
                                    -p 5432:5432 \
                                    postgres:15-alpine
                                
                                # Wait for database to be ready
                                echo "‚è≥ Waiting for database to be ready..."
                                timeout 60 bash -c 'until docker exec diagramai-test-db pg_isready -U ${POSTGRES_USER}; do sleep 2; done'
                                echo "‚úÖ Database is ready"
                            '''
                        }
                    }
                }
                
                stage('Redis Setup') {
                    steps {
                        script {
                            echo "üî¥ Setting up Redis for testing..."
                            
                            sh '''
                                # Stop any existing Redis containers
                                docker stop diagramai-test-redis || true
                                docker rm diagramai-test-redis || true
                                
                                # Start Redis container
                                docker run -d \
                                    --name diagramai-test-redis \
                                    -p 6379:6379 \
                                    redis:7-alpine
                                
                                # Wait for Redis to be ready
                                echo "‚è≥ Waiting for Redis to be ready..."
                                timeout 30 bash -c 'until docker exec diagramai-test-redis redis-cli ping | grep -q PONG; do sleep 2; done'
                                echo "‚úÖ Redis is ready"
                            '''
                        }
                    }
                }
            }
        }
        
        stage('üì¶ Dependencies Installation') {
            steps {
                script {
                    echo "üì¶ Installing dependencies..."
                }
                
                // Change to DiagramAI directory
                dir('DiagramAI') {
                    // Install dependencies using npm ci for reproducible builds
                    sh '''
                        echo "üîç Checking package.json..."
                        if [ ! -f package.json ]; then
                            echo "‚ùå package.json not found!"
                            exit 1
                        fi

                        echo "üì• Installing dependencies with npm ci..."
                        npm ci --prefer-offline --no-audit

                        echo "üé≠ Installing Playwright browsers..."
                        # Try to install browsers without system dependencies first
                        if npx playwright install chromium; then
                            echo "‚úÖ Playwright browsers installed successfully"
                        else
                            echo "‚ö†Ô∏è Playwright browser installation failed, but continuing..."
                            echo "   E2E tests may fail if browsers are not available"
                        fi

                        echo "‚úÖ Dependencies installed successfully"
                    '''
                    
                    // Verify critical dependencies
                    sh '''
                        echo "üîç Verifying critical dependencies..."
                        npm list next jest @playwright/test --depth=0
                        echo "‚úÖ Critical dependencies verified"
                    '''
                }
            }
        }
        
        stage('üèóÔ∏è Build Application') {
            steps {
                script {
                    echo "üèóÔ∏è Building Next.js application..."
                }
                
                dir('DiagramAI') {
                    // Generate Prisma client
                    sh '''
                        echo "üîß Generating Prisma client..."
                        npx prisma generate
                    '''
                    
                    // Build the application
                    sh '''
                        echo "üèóÔ∏è Building Next.js application..."
                        npm run build
                        
                        echo "üîç Verifying build artifacts..."
                        if [ ! -d ".next" ]; then
                            echo "‚ùå Build failed - .next directory not found!"
                            exit 1
                        fi
                        
                        if [ ! -f ".next/BUILD_ID" ]; then
                            echo "‚ùå Build failed - BUILD_ID not found!"
                            exit 1
                        fi
                        
                        echo "‚úÖ Build completed successfully"
                        echo "üìä Build size:"
                        du -sh .next/
                    '''
                }
            }
        }
        
        stage('üß™ Testing Suite') {
            parallel {
                stage('Unit Tests (33 tests)') {
                    steps {
                        script {
                            echo "üß™ Running unit tests..."
                        }
                        
                        dir('DiagramAI') {
                            sh '''
                                echo "üß™ Running unit tests with coverage..."
                                npm run test:unit -- --coverage --ci --watchAll=false --testResultsProcessor=jest-junit
                                
                                echo "üìä Unit test results:"
                                if [ -f coverage/lcov-report/index.html ]; then
                                    echo "‚úÖ Coverage report generated"
                                fi
                            '''
                        }
                    }
                    post {
                        always {
                            dir('DiagramAI') {
                                // Archive coverage reports
                                publishHTML([
                                    allowMissing: false,
                                    alwaysLinkToLastBuild: true,
                                    keepAll: true,
                                    reportDir: 'coverage/lcov-report',
                                    reportFiles: 'index.html',
                                    reportName: 'Unit Test Coverage Report'
                                ])
                            }
                        }
                    }
                }
                
                stage('Integration Tests (10 tests)') {
                    steps {
                        script {
                            echo "üîó Running integration tests..."
                        }
                        
                        dir('DiagramAI') {
                            // Run database migrations for integration tests
                            sh '''
                                echo "üóÑÔ∏è Running database migrations..."
                                npx prisma migrate deploy --schema=./prisma/schema.prisma
                            '''
                            
                            sh '''
                                echo "üîó Running integration tests..."
                                npm run test:integration -- --ci --watchAll=false --testResultsProcessor=jest-junit
                                
                                echo "üìä Integration test results completed"
                            '''
                        }
                    }
                }
            }
        }
        
        stage('üåê End-to-End Tests (38 tests)') {
            steps {
                script {
                    echo "üåê Running E2E tests..."
                }
                
                dir('DiagramAI') {
                    // Start the application for E2E testing
                    sh '''
                        echo "üöÄ Starting application for E2E testing..."
                        
                        # Start the application in background
                        npm run start &
                        APP_PID=$!
                        echo $APP_PID > app.pid
                        
                        # Wait for application to be ready
                        echo "‚è≥ Waiting for application to be ready..."
                        timeout 120 bash -c 'until curl -f http://localhost:3000/api/health 2>/dev/null; do sleep 2; done' || {
                            echo "‚ùå Application failed to start within timeout"
                            kill $APP_PID 2>/dev/null || true
                            exit 1
                        }
                        
                        echo "‚úÖ Application is ready for E2E testing"
                    '''
                    
                    // Run E2E tests
                    sh '''
                        echo "üåê Running Playwright E2E tests..."
                        npm run test:e2e -- --reporter=junit
                        
                        echo "üìä E2E test results completed"
                    '''
                }
            }
            post {
                always {
                    dir('DiagramAI') {
                        // Stop the application
                        sh '''
                            if [ -f app.pid ]; then
                                APP_PID=$(cat app.pid)
                                echo "üõë Stopping application (PID: $APP_PID)..."
                                kill $APP_PID 2>/dev/null || true
                                rm -f app.pid
                            fi
                        '''
                        
                        // Archive E2E test results
                        publishHTML([
                            allowMissing: true,
                            alwaysLinkToLastBuild: true,
                            keepAll: true,
                            reportDir: 'playwright-report',
                            reportFiles: 'index.html',
                            reportName: 'E2E Test Report'
                        ])
                        
                        // Archive test artifacts
                        archiveArtifacts artifacts: 'test-results/**/*', allowEmptyArchive: true
                        archiveArtifacts artifacts: 'tests/screenshots/**/*', allowEmptyArchive: true
                    }
                }
            }
        }
        
        stage('üìä Test Results Validation') {
            steps {
                script {
                    echo "üìä Validating test results..."
                    
                    dir('DiagramAI') {
                        // Parse and validate test results
                        def testResults = sh(
                            script: '''
                                echo "üîç Analyzing test results..."
                                
                                # Count unit tests
                                UNIT_TESTS=$(npm run test:unit -- --passWithNoTests --silent | grep -o "[0-9]\\+ passing" | head -1 | grep -o "[0-9]\\+" || echo "0")
                                
                                # Count integration tests  
                                INTEGRATION_TESTS=$(npm run test:integration -- --passWithNoTests --silent | grep -o "[0-9]\\+ passing" | head -1 | grep -o "[0-9]\\+" || echo "0")
                                
                                # Count E2E tests from Playwright report
                                E2E_TESTS=$(grep -o "[0-9]\\+ passed" test-results/results.xml 2>/dev/null | grep -o "[0-9]\\+" || echo "0")
                                
                                TOTAL_TESTS=$((UNIT_TESTS + INTEGRATION_TESTS + E2E_TESTS))
                                
                                echo "üìä Test Results Summary:"
                                echo "   - Unit Tests: $UNIT_TESTS/33"
                                echo "   - Integration Tests: $INTEGRATION_TESTS/10" 
                                echo "   - E2E Tests: $E2E_TESTS/38"
                                echo "   - Total: $TOTAL_TESTS/81"
                                
                                # Validate 100% success rate requirement
                                if [ "$UNIT_TESTS" -eq 33 ] && [ "$INTEGRATION_TESTS" -eq 10 ] && [ "$E2E_TESTS" -eq 38 ]; then
                                    echo "‚úÖ ALL TESTS PASSED - 100% SUCCESS RATE ACHIEVED!"
                                    echo "SUCCESS"
                                else
                                    echo "‚ùå PIPELINE FAILED - NOT ALL TESTS PASSED"
                                    echo "   Required: 33 unit + 10 integration + 38 E2E = 81 total"
                                    echo "   Actual: $UNIT_TESTS unit + $INTEGRATION_TESTS integration + $E2E_TESTS E2E = $TOTAL_TESTS total"
                                    echo "FAILURE"
                                fi
                            ''',
                            returnStdout: true
                        ).trim()
                        
                        // Check if all tests passed
                        if (!testResults.contains('SUCCESS')) {
                            error("‚ùå PIPELINE FAILED: Not all tests passed. Required 100% success rate (81/81 tests).")
                        }
                        
                        echo "‚úÖ Test validation completed successfully - 100% success rate achieved!"
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "üßπ Starting cleanup process..."
            }
            
            // Cleanup Docker containers
            sh '''
                echo "üê≥ Cleaning up Docker containers..."
                docker stop diagramai-test-db diagramai-test-redis 2>/dev/null || true
                docker rm diagramai-test-db diagramai-test-redis 2>/dev/null || true
                echo "‚úÖ Docker cleanup completed"
            '''
            
            // Archive build artifacts
            dir('DiagramAI') {
                archiveArtifacts artifacts: '.next/**/*', allowEmptyArchive: true
                archiveArtifacts artifacts: 'coverage/**/*', allowEmptyArchive: true
            }
            
            // Clean workspace
            cleanWs(
                cleanWhenNotBuilt: false,
                deleteDirs: true,
                disableDeferredWipeout: true,
                notFailBuild: true
            )
        }
        
        success {
            script {
                echo "üéâ PIPELINE SUCCESS: All 81 tests passed (100% success rate)!"
                echo "‚úÖ DiagramAI build completed successfully"
                
                // Send success notification (customize as needed)
                // emailext (
                //     subject: "‚úÖ DiagramAI Build Success - ${env.BUILD_NUMBER}",
                //     body: "All tests passed successfully. Build artifacts are ready for deployment.",
                //     to: "${env.CHANGE_AUTHOR_EMAIL ?: 'team@diagramai.com'}"
                // )
            }
        }
        
        failure {
            script {
                echo "‚ùå PIPELINE FAILED: Not all tests passed"
                echo "üí° Check the test results above to identify which tests failed"
                
                // Send failure notification (customize as needed)
                // emailext (
                //     subject: "‚ùå DiagramAI Build Failed - ${env.BUILD_NUMBER}",
                //     body: "Pipeline failed. Check Jenkins console output for details.",
                //     to: "${env.CHANGE_AUTHOR_EMAIL ?: 'team@diagramai.com'}"
                // )
            }
        }
        
        unstable {
            script {
                echo "‚ö†Ô∏è PIPELINE UNSTABLE: Some tests may have issues"
            }
        }
    }
}
