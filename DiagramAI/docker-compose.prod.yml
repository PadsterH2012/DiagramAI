# Production Docker Compose for DiagramAI
# Uses the published DockerHub image: padster2012/diagramai:latest
#
# Quick Start:
#   docker-compose -f docker-compose.prod.yml up -d
#
# Access:
#   - DiagramAI: http://localhost:3000
#   - Database Admin: http://localhost:8080
#   - Health Check: http://localhost:3000/api/health

version: '3.8'

services:
  app:
    image: padster2012/diagramai:latest
    container_name: diagramai-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:DiagramAI2024!@db:5432/diagramai
      - REDIS_URL=redis://redis:6379
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=DiagramAI-Production-Secret-2024-Change-This-In-Production
      # Optional: Add your API keys here
      # - OPENAI_API_KEY=your_openai_key_here
      # - ANTHROPIC_API_KEY=your_anthropic_key_here
      # - OPENROUTER_API_KEY=your_openrouter_key_here
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - diagramai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.diagramai.service=app"
      - "com.diagramai.version=1.0.40"

  db:
    image: postgres:15-alpine
    container_name: diagramai-db
    environment:
      - POSTGRES_DB=diagramai
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=DiagramAI2024!
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - diagramai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d diagramai"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    labels:
      - "com.diagramai.service=database"
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  redis:
    image: redis:7-alpine
    container_name: diagramai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - diagramai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    labels:
      - "com.diagramai.service=cache"
    command: redis-server /usr/local/etc/redis/redis.conf --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Database admin interface
  adminer:
    image: adminer:4.8.1
    container_name: diagramai-adminer
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=db
      - ADMINER_DESIGN=pepa-linha
    depends_on:
      db:
        condition: service_healthy
    networks:
      - diagramai-network
    restart: unless-stopped
    labels:
      - "com.diagramai.service=admin"

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: diagramai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      app:
        condition: service_healthy
    networks:
      - diagramai-network
    restart: unless-stopped
    labels:
      - "com.diagramai.service=proxy"
    profiles:
      - "with-nginx"

volumes:
  postgres_data:
  redis_data:

networks:
  diagramai-network:
    driver: bridge
